#include "orientedgraph.h"

OrientedGraph::OrientedGraph(int vtx_count = 0) {
}

//-----------------------------------------------------------------------------
/** Вычисляет кратчайшие пути в графе от заданной вершины до всех остальных
 *
 * Метод следует алгоритму Дейкстры при работе
 *
 * @param vtx_start Вершина, с которой будут начинаться все пути */
OrientedGraph::DjkstraResults OrientedGraph::_findAllShortestPathsFrom(Vertex* vtx_start) const {
    // Инициализировать список "еще не посещенных" вершин графа


    /* Присвоить каждой вершине метки с числовыми значениями:
     * 0 - для исходной вершины, бесконечность - для остальных */


    /* До тех пор, пока еще остались непосещенные вершины: */

        /* Взять следующую из непосещенных вершин с наименьшим значением
         * числовой метки */

        /* Последовательно пройти всех соседей взятой вершины, вычисляя
         * вес нового пути, проходящего через эту вершину как сумму значения
         * числовой метки взятой вершины и веса исходящего ребра от этой
         * вершины до соседа. Если результат вычислений оказывается меньше
         * текщего значения числовой метки соседа, значит только что был
         * найден более короткий путь к этому соседу через взятую вершину.
         * Отметим зятую вершину как предпоследнюю на пути к этому соседу и
         * присвоим сумму-результат как новое значение числовой метки */
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
